AI-Based Disk Scheduling Algorithms

Project Overview
This project implements and compares **AI-based disk scheduling algorithms** with traditional scheduling methods such as **First-Come-First-Serve (FCFS), Shortest Seek Time First (SSTF), and SCAN**. The goal is to **optimize disk seek time** and improve performance using AI-based predictive models.

Features
- Traditional Algorithms**: FCFS, SSTF, SCAN, C-SCAN, LOOK
- AI-Based Scheduling**: Uses machine learning to predict optimal request order
- Graphical User Interface (GUI)**: Built using Tkinter for easy interaction
- Performance Metrics**: Total seek time, request order visualization
- Modular Code Structure**: Easy to extend and modify

Project Structure

CPU-Scheduler
│── data/                         # Sample test data
│── models/                       # AI-based scheduling models
│   ├── ai_scheduler.py           # ML-based scheduler implementation
│── traditional_algorithms/        # Classic scheduling algorithms
│   ├── __init__.py
│   ├── fcfs.py                   # First-Come-First-Serve
│   ├── sstf.py                   # Shortest Seek Time First
│   ├── scan.py                   # SCAN algorithm
│── visualization/                 # Plot and graph generation
│── gui/                           # Graphical interface
│   ├── main.py                    # GUI entry point
│── utils/                         # Helper functions
│── run.py                         # Main execution script
│── README.md                      # Documentation

Installation
Prerequisites
- Python 3.8 or later
- Pip (Python package manager)

Install Dependencies
Run the following command to install required libraries:
bash
pip install numpy scipy scikit-learn matplotlib tkinter

Usage
Run the GUI Interface
Execute the following command from the project root directory:
bash
python -m gui.main

Command-Line Execution
Run a specific algorithm from the terminal:
bash
python run.py --algorithm fcfs --requests "98, 183, 37, 122, 14, 124, 65, 67" --head 53

Available Algorithms
- fcfs = First Come First Serve
- sstf = Shortest Seek Time First
- scan = SCAN Algorithm
- ai = AI-based optimized scheduling

Example Test Cases
Test Case 1: FCFS Scheduling
Input:
Requests: 98, 183, 37, 122, 14, 124, 65, 67
Head Position: 53
Algorithm: FCFS

-Expected Output:
Execution Order: [98, 183, 37, 122, 14, 124, 65, 67]
Total Seek Time: 640

Performance Evaluation
The AI-based scheduling algorithm is designed to **reduce seek time** by predicting optimal request sequences. It is tested against traditional methods to compare efficiency.


